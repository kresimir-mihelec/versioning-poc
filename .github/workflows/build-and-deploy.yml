# .github/workflows/build.yml
name: Build (echo version)

on:
  push:
    branches: [development, staging, main]

jobs:
  build-dev:
    if: github.ref_name == 'development'
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with: { node-version: '20', cache: 'npm' }
      - run: npm ci
      - name: Compute version for dev
        run: |
          LAST=$(node -p "require('./package.json').version")
          SHA=${GITHUB_SHA::7}
          EFFECTIVE_VERSION="${LAST}-dev.${SHA}"
          echo "Dev build version → $EFFECTIVE_VERSION"

  build-staging:
    if: github.ref_name == 'staging'
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with: { node-version: '20', cache: 'npm' }
      - run: npm ci
      - name: Compute version for staging
        run: |
          if [ "${{ needs.release.outputs.new_release_published }}" = "true" ]; then
            EFFECTIVE_VERSION="${{ needs.release.outputs.new_release_version }}"
          else
            # no new tag → fall back to last tag reachable from HEAD
            EFFECTIVE_VERSION=$(git describe --tags --match "v*"-stage.* --abbrev=0)
          fi
          echo "Staging build version → $EFFECTIVE_VERSION"
        # nothing is committed back — package.json/lock stay untouched

  build-main:
    if: github.ref_name == 'main'
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-node@v4
        with: { node-version: '20', cache: 'npm' }
      - run: npm ci
      - name: Compute version for main
        run: |
          EFFECTIVE_VERSION=$(node -p "require('./package.json').version")
          echo "Main build version → $EFFECTIVE_VERSION"
