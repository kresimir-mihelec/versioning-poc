name: Release, Build & Deploy

on:
  push:
    branches:
      - main
      - staging
      - development

jobs:
  # ────────────────────────────────────────────────────────────
  # 1. Tag, bump versions, update CHANGELOG.md
  # ────────────────────────────────────────────────────────────
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    outputs:
      new_release_published: ${{ steps.sr.outputs.new_release_published }}
      new_release_version:   ${{ steps.sr.outputs.new_release_version }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm

      - run: npm ci

      - name: semantic-release
        id: sr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
        run: npx semantic-release

      # Collapse all "-stage.N" headings once the GA tag lands on main
      - name: Collapse RC headings in CHANGELOG
        if: github.ref_name == 'refs/heads/main' && steps.sr.outputs.new_release_published == 'true'
        run: |
          sed -i '/-stage\./d' CHANGELOG.md
          git config user.name  sync-bot
          git config user.email sync-bot@users.noreply.github.com
          git add CHANGELOG.md
          git commit -m "chore(changelog): collapse RC headings [skip ci]" || echo "no change"
          git push

  # ────────────────────────────────────────────────────────────
  # 2. Build jobs (one per branch)
  # ────────────────────────────────────────────────────────────
  build-dev:
    if: github.ref_name == 'refs/heads/development'
    needs: release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
      - run: npm ci
      - name: Echo dev version
        run: |
          LAST=$(node -p "require('./package.json').version")
          SHA=${GITHUB_SHA::7}
          echo "Dev build → ${LAST}-dev.${SHA}"

  build-staging:
    if: github.ref_name == 'refs/heads/staging'
    needs: release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
      - run: npm ci
      - name: Echo staging version
        run: |
          if [ "${{ needs.release.outputs.new_release_published }}" = "true" ]; then
            echo "Staging build → ${{ needs.release.outputs.new_release_version }}"
          else
            echo "Staging build → $(git describe --tags --match 'v*'-stage.* --abbrev=0)"
          fi

  build-main:
    if: github.ref_name == 'refs/heads/main'
    needs: release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: npm
      - run: npm ci
      - name: Echo main version
        run: |
          echo "Main build → $(node -p \"require('./package.json').version\")"
